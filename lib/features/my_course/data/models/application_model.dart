import 'package:esl/features/my_course/data/models/educational_background_model.dart';
import 'package:esl/features/my_course/data/models/employment_history_model.dart';
import 'package:esl/features/my_course/data/models/enrollment_reference_model.dart';
import 'package:esl/features/my_course/data/models/language_proficiency_model.dart';
import 'package:esl/features/my_course/data/models/required_document_model.dart';
import 'package:esl/features/my_course/domain/entities/application.dart';

class ApplicationModel extends Application {
  const ApplicationModel({
    super.id,
    super.userId,
    super.programId,
    super.program_id,
    super.dob,
    super.birthCountry,
    super.birthCity,
    super.gender,
    super.nationality,
    super.idType,
    super.idNumber,
    super.idDocument,
    super.address,
    super.city,
    super.homeAddress,
    super.wereda,
    super.religion,
    super.seamanBook,
    super.nearestPoliceStation,
    super.healthIssue,
    super.convictedCrimeDescription,
    super.crimeRecordDocument,
    super.postalAddress,
    super.maritalStatus,
    super.numberOfChildren,
    super.mobileNumber,
    super.alternateEmailAddress,
    super.emergencyPersonName,
    super.relationshipWithEmergencyPerson,
    super.emergencyPersonAddress,
    super.emergencyPersonPhoneNumber,
    super.emergencyPersonAlternatePhoneNumber,
    super.convicted,
    super.goalsMaritimeAcademy,
    super.careerAspirations,
    super.physicallyImpaired,
    super.status,
    super.paymentStatus,
    super.passportSizePhoto,
    super.educationalBackgrounds,
    super.languageProficiencies,
    super.employmentHistories,
    super.references,
    super.requiredDocuments,
  });

  factory ApplicationModel.fromJson(Map<String, dynamic> json) {
    return ApplicationModel(
      id: json['id'] as String?,
      userId: json['userId'] as String?,
      programId: json['programId'] as String?,
      program_id: json['program_id'] as String?,
      dob: json['dob'] as String?,
      birthCountry: json['birthCountry'] as String?,
      birthCity: json['birthCity'] as String?,
      gender: json['gender'] as String?,
      nationality: json['nationality'] as String?,
      idType: json['idType'] as String?,
      idNumber: json['idNumber'] as String?,
      idDocument: json['idDocument'] as String?,
      address: json['address'] as String?,
      city: json['city'] as String?,
      homeAddress: json['homeAddress'] as String?,
      wereda: json['wereda'] as String?,
      religion: json['religion'] as String?,
      seamanBook: json['seamanBook'] as String?,
      nearestPoliceStation: json['nearestPoliceStation'] as String?,
      healthIssue: json['healthIssue'] as String?,
      convictedCrimeDescription: json['convictedCrimeDescription'] as String?,
      crimeRecordDocument: json['crimeRecordDocument'] as String?,
      postalAddress: json['postalAddress'] as String?,
      maritalStatus: json['maritalStatus'] as String?,
      numberOfChildren: json['numberOfChildren'] as int?,
      mobileNumber: json['mobileNumber'] as String?,
      alternateEmailAddress: json['alternateEmailAddress'] as String?,
      emergencyPersonName: json['emergencyPersonName'] as String?,
      relationshipWithEmergencyPerson: json['relationshipWithEmergencyPerson'] as String?,
      emergencyPersonAddress: json['emergencyPersonAddress'] as String?,
      emergencyPersonPhoneNumber: json['emergencyPersonPhoneNumber'] as String?,
      emergencyPersonAlternatePhoneNumber: json['emergencyPersonAlternatePhoneNumber'] as String?,
      convicted: json['convicted'] as bool?,
      goalsMaritimeAcademy: json['goalsMaritimeAcademy'] as String?,
      careerAspirations: json['careerAspirations'] as String?,
      physicallyImpaired: json['physicallyImpaired'] as bool?,
      status: json['status'] as String?,
      paymentStatus: json['paymentStatus'] as String?,
      passportSizePhoto: json['passportSizePhoto'] as String?,
      educationalBackgrounds: (json['educationalBackgrounds'] as List<dynamic>?)
          ?.map((bg) => EducationalBackgroundModel.fromJson(bg as Map<String, dynamic>).toEntity())
          .toList(),
      languageProficiencies: (json['languageProficiencies'] as List<dynamic>?)
          ?.map((lp) => LanguageProficiencyModel.fromJson(lp as Map<String, dynamic>).toEntity())
          .toList(),
      employmentHistories: (json['employmentHistories'] as List<dynamic>?)
          ?.map((eh) => EmploymentHistoryModel.fromJson(eh as Map<String, dynamic>).toEntity())
          .toList(),
      references: (json['references'] as List<dynamic>?)
          ?.map((er) => EnrollmentReferenceModel.fromJson(er as Map<String, dynamic>).toEntity())
          .toList(),
      requiredDocuments: (json['requiredDocuments'] as List<dynamic>?)
          ?.map((doc) => RequiredDocumentModel.fromJson(doc as Map<String, dynamic>).toEntity())
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'programId': programId,
      'program_id': program_id,
      'dob': dob,
      'birthCountry': birthCountry,
      'birthCity': birthCity,
      'gender': gender,
      'nationality': nationality,
      'idType': idType,
      'idNumber': idNumber,
      'idDocument': idDocument,
      'address': address,
      'city': city,
      'homeAddress': homeAddress,
      'wereda': wereda,
      'religion': religion,
      'seamanBook': seamanBook,
      'nearestPoliceStation': nearestPoliceStation,
      'healthIssue': healthIssue,
      'convictedCrimeDescription': convictedCrimeDescription,
      'crimeRecordDocument': crimeRecordDocument,
      'postalAddress': postalAddress,
      'maritalStatus': maritalStatus,
      'numberOfChildren': numberOfChildren,
      'mobileNumber': mobileNumber,
      'alternateEmailAddress': alternateEmailAddress,
      'emergencyPersonName': emergencyPersonName,
      'relationshipWithEmergencyPerson': relationshipWithEmergencyPerson,
      'emergencyPersonAddress': emergencyPersonAddress,
      'emergencyPersonPhoneNumber': emergencyPersonPhoneNumber,
      'emergencyPersonAlternatePhoneNumber': emergencyPersonAlternatePhoneNumber,
      'convicted': convicted,
      'goalsMaritimeAcademy': goalsMaritimeAcademy,
      'careerAspirations': careerAspirations,
      'physicallyImpaired': physicallyImpaired,
      'status': status,
      'paymentStatus': paymentStatus,
      'passportSizePhoto': passportSizePhoto,
      'educationalBackgrounds': educationalBackgrounds
          ?.map((bg) => EducationalBackgroundModel.fromEntity(bg).toJson())
          .toList(),
      'languageProficiencies': languageProficiencies
          ?.map((lp) => LanguageProficiencyModel.fromEntity(lp).toJson())
          .toList(),
      'employmentHistories': employmentHistories
          ?.map((eh) => EmploymentHistoryModel.fromEntity(eh).toJson())
          .toList(),
      'references': references
          ?.map((er) => EnrollmentReferenceModel.fromEntity(er).toJson())
          .toList(),
      'requiredDocuments': requiredDocuments
          ?.map((doc) => RequiredDocumentModel.fromEntity(doc).toJson())
          .toList(),
    };
  }

  factory ApplicationModel.fromEntity(Application application) {
    return ApplicationModel(
      id: application.id,
      userId: application.userId,
      programId: application.programId,
      program_id: application.program_id,
      dob: application.dob,
      birthCountry: application.birthCountry,
      birthCity: application.birthCity,
      gender: application.gender,
      nationality: application.nationality,
      idType: application.idType,
      idNumber: application.idNumber,
      idDocument: application.idDocument,
      address: application.address,
      city: application.city,
      homeAddress: application.homeAddress,
      wereda: application.wereda,
      religion: application.religion,
      seamanBook: application.seamanBook,
      nearestPoliceStation: application.nearestPoliceStation,
      healthIssue: application.healthIssue,
      convictedCrimeDescription: application.convictedCrimeDescription,
      crimeRecordDocument: application.crimeRecordDocument,
      postalAddress: application.postalAddress,
      maritalStatus: application.maritalStatus,
      numberOfChildren: application.numberOfChildren,
      mobileNumber: application.mobileNumber,
      alternateEmailAddress: application.alternateEmailAddress,
      emergencyPersonName: application.emergencyPersonName,
      relationshipWithEmergencyPerson: application.relationshipWithEmergencyPerson,
      emergencyPersonAddress: application.emergencyPersonAddress,
      emergencyPersonPhoneNumber: application.emergencyPersonPhoneNumber,
      emergencyPersonAlternatePhoneNumber: application.emergencyPersonAlternatePhoneNumber,
      convicted: application.convicted,
      goalsMaritimeAcademy: application.goalsMaritimeAcademy,
      careerAspirations: application.careerAspirations,
      physicallyImpaired: application.physicallyImpaired,
      status: application.status,
      paymentStatus: application.paymentStatus,
      passportSizePhoto: application.passportSizePhoto,
      educationalBackgrounds: application.educationalBackgrounds,
      languageProficiencies: application.languageProficiencies,
      employmentHistories: application.employmentHistories,
      references: application.references,
      requiredDocuments: application.requiredDocuments,
    );
  }

  Application toEntity() {
    return Application(
      id: id,
      userId: userId,
      programId: programId,
      program_id: program_id,
      dob: dob,
      birthCountry: birthCountry,
      birthCity: birthCity,
      gender: gender,
      nationality: nationality,
      idType: idType,
      idNumber: idNumber,
      idDocument: idDocument,
      address: address,
      city: city,
      homeAddress: homeAddress,
      wereda: wereda,
      religion: religion,
      seamanBook: seamanBook,
      nearestPoliceStation: nearestPoliceStation,
      healthIssue: healthIssue,
      convictedCrimeDescription: convictedCrimeDescription,
      crimeRecordDocument: crimeRecordDocument,
      postalAddress: postalAddress,
      maritalStatus: maritalStatus,
      numberOfChildren: numberOfChildren,
      mobileNumber: mobileNumber,
      alternateEmailAddress: alternateEmailAddress,
      emergencyPersonName: emergencyPersonName,
      relationshipWithEmergencyPerson: relationshipWithEmergencyPerson,
      emergencyPersonAddress: emergencyPersonAddress,
      emergencyPersonPhoneNumber: emergencyPersonPhoneNumber,
      emergencyPersonAlternatePhoneNumber: emergencyPersonAlternatePhoneNumber,
      convicted: convicted,
      goalsMaritimeAcademy: goalsMaritimeAcademy,
      careerAspirations: careerAspirations,
      physicallyImpaired: physicallyImpaired,
      status: status,
      paymentStatus: paymentStatus,
      passportSizePhoto: passportSizePhoto,
      educationalBackgrounds: educationalBackgrounds,
      languageProficiencies: languageProficiencies,
      employmentHistories: employmentHistories,
      references: references,
      requiredDocuments: requiredDocuments,
    );
  }
}
